//npx prisma generate
//npx prisma migrate dev

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    password      String?
    emailVerified DateTime?
    image         String?
    birthDay      DateTime?
    bio           String?
    gender        String?
    country       String?
    city          String?
    municipality  String?
    accounts      Account[]
    sessions      Session[]
    interest      Activity[]
    AddedActivity AddedActivity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Activity {
    id     Int     @id @default(autoincrement())
    name   String
    image  String?
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model AddedActivity {
    id           Int      @id @default(autoincrement())
    description  String
    country      String
    city         String
    municipality String
    place        String
    googleMap    String?
    date         DateTime
    start        DateTime
    end          DateTime
    maxAttendees Int?
    price        Float?
    currency     String
    type         String
    createdAt    DateTime @default(now())

    userId    String
    createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Optional for WebAuthn support
//model Authenticator {
//    credentialID         String  @unique
//    userId               String
//   providerAccountId    String
//  credentialPublicKey  String
// counter              Int
//credentialDeviceType String
//credentialBackedUp   Boolean
//transports           String?

//user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//@@id([userId, credentialID])
//}
